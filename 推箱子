一、简述：经过一年的初步学习，已经基本掌握了C语言基本知识，简单程序架构及分析，除了理论，实际操作也是很重要的。除了贪吃蛇，推箱子和其原理差不多。

二、项目功能要求：
（1）实现分数的计算的功能。
（2）实现人和箱子的上、下、左、右用W、S、A、D键控制移动。
（3）实现地图的构建。
（4）实现箱子在到达目的后显示区分功能。

三、知识点解析：
1、整个推箱子的地图是固定地图，由于暂时对地图无法用图形化界面，就可以用数字代替空地，人，箱子，墙等，再用数组来实现地图的构建,在改变地图可以通过改变数组中的元素来实现对整个地图的改变，更大程度上减少了重新绘制地图改变代码结构所出现的问题。
2、为了在地图中实现箱子和人的移动计算，我们需要找到人和箱子的具体位置，显而易见通过坐标来控制人的位置并进一步控制箱子的位置，这样能更大程度的减少代码量，更好的精确人和箱子的位置，W、S控制横坐标的加减，A、D键控制纵坐标的加减。
3、当箱子到达目的地点为了更好的计算分数，可以通过箱子到达一个目的地点，与该点重合后箱子ID和目的地ID相加得到的数来确定箱子已经达到目的地并计算分数（ID为地图要素数字代表）。当所有的箱子到达目的地后则游戏结束。
通过本游戏程序的设计与实现，可达到如下目标：
（1）声明画图函数地图的二维数组应用。
（2）学会分析程序用到的数据结构，并针对具体程序灵活应用。
(3)应用学会应用C语言位运算操作提高程序运行效率和减少代码量。

四、代码：#include <stdio.h>  
#include <stdlib.h> 
#include <conio.h>  
int i,j; 
void draw_map(int map[10][12]); //声明画图函数
int main()
{
 system("title 推箱子");
 char input; 
 int count=0; //定义记分变量
 int map[10][12] = {{2,2,2,2,2,1,1,1,1,1,2,2},
 {1,1,1,1,2,1,0,0,0,1,1,2},
 {1,0,0,1,1,1,0,1,0,0,1,2},
 {1,0,4,3,3,3,3,3,1,0,1,1},
 {1,0,0,1,1,3,3,3,4,0,0,1},
 {1,0,0,0,0,4,1,1,4,1,0,1},
 {1,0,4,1,4,0,0,0,4,0,0,1},
 {1,1,0,6,0,1,1,1,4,0,0,1},
 {2,1,1,1,1,1,2,1,0,0,0,1},
 {2,2,2,2,2,2,2,1,1,1,1,1}
 };
 while (1) //死循环，等待用户命令
 {
 system("CLS");
 printf("\n");
 draw_map(map);
 printf("当前得分：%d\n",count);
 //找初始位置
 for (i=0;i<10;i++)
 {
 for (j=0;j<12;j++)
 {
 if (map[i][j]==6||map[i][j]==9)
  break;
 }
 if (map[i][j]==6||map[i][j]==9)
 break;
 }
 printf("您的当前坐标（%d，%d）",i,j);  
 input = getch(); //用getch()函数无需回车确认地获取用户输入，用于控制行走方向。
 switch (input)
 {
 case 'w':
 //如果人前面是空地。 //0代表空地 6代表人 //3代表目的地
 if(map[i-1][j]==0)
 {
 map[i-1][j]=6+0; //人往前走一步，ID为人的ID（）加上空地的ID（）。
 if(map[i][j]==9) //如果当前人站的位置为目的地，则ID为（即人的ID（）加上目的地ID（））。
  map[i][j]=3; //将人往前走一步后原地的ID修改为空地ID（）。
 else
  map[i][j]=0; //否则原地ID修改为空地ID 。  
 }
 //如果人前面是目的地。
 else if((map[i-1][j]==3)||(map[i-1][j]==9))
 {
 map[i-1][j]=6+3; //人往前走一步，ID为人ID+目的地ID=9。
 if(map[i][j]==9) //如果原地也是目的地（ID为）。
  map[i][j]=3; //人走后把原地ID修改回目的地ID。
 else
  map[i][j]=0; //否则原地ID修改为为空地ID
 }
 //如果人前面是箱子。//4代表箱子 //7箱子进入目的地
 else if(map[i-1][j]==4)
 {
 //如果人前面是箱子，而箱子前面是空地。
 if (map[i-2][j]==0)
 { 
  map[i-2][j]=4; //人推箱子往前走一步，把空地ID修改为箱子ID（）
  //下面是对箱子原地进行判断
  if(map[i-1][j]==7) //如果箱子原地为目的地。
  map[i-1][j]=9; //人站在箱子的原地（目的地）时该地ID应该为人的ID+目的地ID=9。
  else
  map[i-1][j]=6; //否则，人站在了原来的空地上，ID应该为+0=6。
  //下面是对人原地进行判断
  if(map[i][j]==9) //如果之前是目的地。
  map[i][j]=3; //人走了之后修改回目的地ID。
  else
  map[i][j]=0; //否则就是空地。
 }
 //如果人的前面是箱子，而箱子前面是目的地。
 else if (map[i-2][j]==3)
 { 
  map[i-2][j]=7; //ID为（目的地ID（）+箱子ID（）=7），表示已经把箱子推入了目的地。
  count++;
  //下面是对箱子原先位置的判断，同上。
  if(map[i-1][j]==7)
  map[i-1][j]=9;
  else
  map[i-1][j]=6;
  //下面是对人原先位置进行判断，同上。
  if(map[i][j]==9)
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 }
 //如果人前面是已经进入某目的地的箱子（ID=7）。
 else if(map[i-1][j]==7)
 {
 //如果人前面是已经进入某目的地的箱子,而箱子前面是空地。
 if(map[i-2][j]==0)
 {
  count--;
  map[i-2][j]=4; //把箱子重新推到空地上，ID=箱子ID+空地ID=4。
  map[i-1][j]=9; //人自然而然的就站在了原先的目的地上了。
  //下面是对人原先地进行判断，方法同上。
  if(map[i][j]==9) 
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 //如果人前面是已经进入某目的地的箱子，而箱子前面是另一目的地。
 if(map[i-2][j]==3)
 {
  map[i-2][j]=7; //把箱子推入了另一目的地，自然，ID也应是。
  map[i-1][j]=9; //人站在了目的地上。
  //下面是对人原先站立地进行判断，方法同上。
  if(map[i][j]==9) 
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 }
 break;
 case 's':
 //如果人前面是空地。
 if(map[i+1][j]==0)
 {
 map[i+1][j]=6+0; //人往前走一步，ID为人的ID（）加上空地的ID（）。
 if(map[i][j]==9) //如果当前人站的位置为目的地，则ID为（即人的ID（）加上目的地ID（））。
  map[i][j]=3; //将人往前走一步后原地的ID修改为空地ID（）。
 else
  map[i][j]=0; //否则原地ID修改为空地ID 。  
 }
 //如果人前面是目的地。
 else if(map[i+1][j]==3)
 {
 map[i+1][j]=6+3; //人往前走一步，ID为人ID+目的地ID=9。
 if(map[i][j]==9) //如果原地也是目的地（ID为）。
  map[i][j]=3; //人走后把原地ID修改回目的地ID。
 else
  map[i][j]=0; //否则原地ID修改为为空地ID
 }
 //如果人前面是箱子。
 else if(map[i+1][j]==4)
 {
 //如果人前面是箱子，而箱子前面是空地。
 if (map[i+2][j]==0)
 { 
  map[i+2][j]=4; //人推箱子往前走一步，把空地ID修改为箱子ID（）
  //下面是对箱子原地进行判断
  if(map[i+1][j]==7) //如果箱子原地为目的地。
  map[i+1][j]=9; //人站在箱子的原地（目的地）时该地ID应该为人的ID+目的地ID=9。
  else
  map[i+1][j]=6; //否则，人站在了原来的空地上，ID应该为+0=6。
  //下面是对人原地进行判断
  if(map[i][j]==9) //如果之前是目的地。
  map[i][j]=3; //人走了之后修改回目的地ID。
  else
  map[i][j]=0; //否则就是空地。
 }
 //如果人的前面是箱子，而箱子前面是目的地。
 else if (map[i+2][j]==3)
 { 
  map[i-2][j]=7; //ID为（目的地ID（）+箱子ID（）=7），表示已经把箱子推入了目的地。
  count++;
  //下面是对箱子原先位置的判断，同上。
  if(map[i+1][j]==7)
  map[i+1][j]=9;
  else
  map[i+1][j]=6;
  //下面是对人原先位置进行判断，同上。
  if(map[i][j]==9)
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 }
 //如果人前面是已经进入某目的地的箱子（ID=7）。
 else if(map[i+1][j]==7)
 {
 //如果人前面是已经进入某目的地的箱子,而箱子前面是空地。
 if(map[i+2][j]==0)
 {
  count--;
  map[i+2][j]=4; //把箱子重新推到空地上，ID=箱子ID+空地ID=4。
  map[i+1][j]=9; //人自然而然的就站在了原先的目的地上了。
  //下面是对人原先地进行判断，方法同上。
  if(map[i][j]==9) 
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 //如果人前面是已经进入某目的地的箱子，而箱子前面是另一目的地。
 if(map[i+2][j]==3)
 {
  map[i+2][j]=7; //把箱子推入了另一目的地，自然，ID也应是。
  map[i+1][j]=9; //人站在了目的地上。
  //下面是对人原先站立地进行判断，方法同上。
  if(map[i][j]==9) 
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 }
 break;
 case 'a':
 //如果人前面是空地。
 if(map[i][j-1]==0)
 {
 map[i][j-1]=6+0; //人往前走一步，ID为人的ID（）加上空地的ID（）。
 if(map[i][j]==9) //如果当前人站的位置为目的地，则ID为（即人的ID（）加上目的地ID（））。
  map[i][j]=3; //将人往前走一步后原地的ID修改为空地ID（）。
 else
  map[i][j]=0; //否则原地ID修改为空地ID 。  
 }
 //如果人前面是目的地。
 else if(map[i][j-1]==3)
 {
 map[i][j-1]=6+3; //人往前走一步，ID为人ID+目的地ID=9。
 if(map[i][j]==9) //如果原地也是目的地（ID为）。
  map[i][j]=3; //人走后把原地ID修改回目的地ID。
 else
  map[i][j]=0; //否则原地ID修改为为空地ID
 }
 //如果人前面是箱子。
 else if(map[i][j-1]==4)
 {
 //如果人前面是箱子，而箱子前面是空地。
 if (map[i][j-2]==0)
 { 
  map[i][j-2]=4; //人推箱子往前走一步，把空地ID修改为箱子ID（）
  //下面是对箱子原地进行判断
  if(map[i][j-1]==7) //如果箱子原地为目的地。
  map[i][j-1]=9; //人站在箱子的原地（目的地）时该地ID应该为人的ID+目的地ID=9。
  else
  map[i][j-1]=6; //否则，人站在了原来的空地上，ID应该为+0=6。
  //下面是对人原地进行判断
  if(map[i][j]==9) //如果之前是目的地。
  map[i][j]=3; //人走了之后修改回目的地ID。
  else
  map[i][j]=0; //否则就是空地。
 }
 //如果人的前面是箱子，而箱子前面是目的地。
 else if (map[i][j-2]==3)
 { 
  count++;
  map[i][j-2]=7; //ID为（目的地ID（）+箱子ID（）=7），表示已经把箱子推入了目的地。
  //下面是对箱子原先位置的判断，同上。
  if(map[i][j-1]==7)
  map[i][j-1]=9;
  else
  map[i][j-1]=6;
  //下面是对人原先位置进行判断，同上。
  if(map[i][j]==9)
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 }
 //如果人前面是已经进入某目的地的箱子（ID=7）。
 else if(map[i][j-1]==7)
 {
 //如果人前面是已经进入某目的地的箱子,而箱子前面是空地。
 if(map[i][j-2]==0)
 {
  count--;
  map[i][j-2]=4; //把箱子重新推到空地上，ID=箱子ID+空地ID=4。
  map[i][j-1]=9; //人自然而然的就站在了原先的目的地上了。
  //下面是对人原先地进行判断，方法同上。
  if(map[i][j]==9) 
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 //如果人前面是已经进入某目的地的箱子，而箱子前面是另一目的地。
 if(map[i][j-2]==3)
 {
  map[i][j-2]=7; //把箱子推入了另一目的地，自然，ID也应是。
  map[i][j-1]=9; //人站在了目的地上。
  //下面是对人原先站立地进行判断，方法同上。
  if(map[i][j]==9) 
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 }
 break;
 case 'd':
 //如果人前面是空地。
 if(map[i][j+1]==0)
 {
 map[i][j+1]=6+0; //人往前走一步，ID为人的ID（）加上空地的ID（）。
 if(map[i][j]==9) //如果当前人站的位置为目的地，则ID为（即人的ID（）加上目的地ID（））。
  map[i][j]=3; //将人往前走一步后原地的ID修改为空地ID（）。
 else
  map[i][j]=0; //否则原地ID修改为空地ID 。  
 }
 //如果人前面是目的地。
 else if(map[i][j+1]==3)
 {
 map[i][j+1]=6+3; //人往前走一步，ID为人ID+目的地ID=9。
 if(map[i][j]==9) //如果原地也是目的地（ID为）。
  map[i][j]=3; //人走后把原地ID修改回目的地ID。
 else
  map[i][j]=0; //否则原地ID修改为为空地ID
 }
 //如果人前面是箱子。
 else if(map[i][j+1]==4)
 {
 //如果人前面是箱子，而箱子前面是空地。
 if (map[i][j+2]==0)
 { 
  map[i][j+2]=4; //人推箱子往前走一步，把空地ID修改为箱子ID（）
  //下面是对箱子原地进行判断
  if(map[i][j+1]==7) //如果箱子原地为目的地。
  map[i][j+1]=9; //人站在箱子的原地（目的地）时该地ID应该为人的ID+目的地ID=9。
  else
  map[i][j+1]=6; //否则，人站在了原来的空地上，ID应该为+0=6。
  //下面是对人原地进行判断
  if(map[i][j]==9) //如果之前是目的地。
  map[i][j]=3; //人走了之后修改回目的地ID。
  else
  map[i][j]=0; //否则就是空地。
 }
 //如果人的前面是箱子，而箱子前面是目的地。
 else if (map[i][j+2]==3)
 { 
  count++;
  map[i][j+2]=7; //ID为（目的地ID（）+箱子ID（）=7），表示已经把箱子推入了目的地。
  //下面是对箱子原先位置的判断，同上。
  if(map[i][j+1]==7)
  map[i][j+1]=9;
  else
  map[i][j+1]=6;
  //下面是对人原先位置进行判断，同上。
  if(map[i][j]==9)
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 }
 //如果人前面是已经进入某目的地的箱子（ID=7）。
 else if(map[i][j+1]==7)
 {
 //如果人前面是已经进入某目的地的箱子,而箱子前面是空地。
 if(map[i][j+2]==0)
 {
  count--;
  map[i][j+2]=4; //把箱子重新推到空地上，ID=箱子ID+空地ID=4。
  map[i][j+1]=9; //人自然而然的就站在了原先的目的地上了。
  //下面是对人原先地进行判断，方法同上。
  if(map[i][j]==9) 
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 //如果人前面是已经进入某目的地的箱子，而箱子前面是另一目的地。
 if(map[i][j+2]==3)
 {
  map[i][j+2]=7; //把箱子推入了另一目的地，自然，ID也应是。
  map[i][j+1]=9; //人站在了目的地上。
  //下面是对人原先站立地进行判断，方法同上。
  if(map[i][j]==9) 
  map[i][j]=3;
  else
  map[i][j]=0;
 }
 }
 break;
 }
 if(count==8) //如果分数达到分
 {
 system("CLS"); //清屏
 draw_map(map); 
 break; //退出死循环
 }
 }
 printf("\n恭喜你，过关了！！\n"); //过关提示
 return 0;
}
void draw_map(int map[10][12])
{
  
 for(i=0;i<10;i++)
 {
 for(j=0;j<12;j++)
 {
 switch(map[i][j])
 {
 case 0:
 printf(" "); //数字代表道路
 break;
 case 1:
 printf("#"); //数字代表墙壁
 break;
 case 2:
 printf(" "); //数字是游戏边框的空白部分
 break;
 case 3:
 printf("!"); //数字代表目的地
 break;
 case 4:
 printf("*"); //数字代表箱子
 break;
 case 7:
 printf("$"); //数字代表箱子进入目的地
 break;
 case 6:
 printf("@"); //数字代表人
 break;
 case 9:
 printf("@"); //数字代表人进入目的地
 break;
 }   
 }
 printf("\n"); //分行输出
 }
}
 
